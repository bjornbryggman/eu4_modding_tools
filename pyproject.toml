[tool.poetry]
name = "backend"
version = "0.1.0"
description = ""
authors = ["bjornbryggman"]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.12"
structlog = "^24.1.0"
Wand = "^0.6.13"
replicate = "^0.25.2"
python-dotenv = "^1.0.1"
pydantic = "^2.7.1"
instructor = "^1.2.5"
openai = "^1.25.0"
ruff = "^0.4.3"
requests = "^2.31.0"

[tool.ruff]
required-version = ">=0.4.3"
target-version = "py312"
line-length = 120
indent-width = 4
respect-gitignore = true
output-format = "json"
preview = true
include = ["*.py", "*.pyi", "**/pyproject.toml"]
force-exclude = true
src = ["backend/*"]

[tool.ruff.format]
indent-style = "space"
docstring-code-format = true
skip-magic-trailing-comma = true

[tool.ruff.lint]
select = ["ALL", "D213", "D400", "D407", "D408", "D409", "UP"]
ignore = ["D206", "D300", "D212", "D417", "COM812", "COM819","E111", "E114", "E117", "E265", "FBT", "ISC001", "ISC002", "Q000", "Q001", "Q002", "Q003", "W191"]
fixable = ["ALL"]
task-tags = ["TODO"]

[tool.ruff.lint.flake8-boolean-trap]
extend-allowed-calls = ["pydantic.Field"]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query"]

[tool.ruff.lint.flake8-copyright]
author = "Bj√∂rn Gunnar Bryggman"
min-file-size = 1024

[tool.ruff.lint.flake8-pytest-style]
raises-extend-require-match-for = ["requests.RequestException"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel", "SQLModel"]
runtime-evaluated-decorators = ["pydantic.validate_call", "attrs.define"]
strict = true

[tool.ruff.lint.isort]
extra-standard-library = ["path"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
split-on-trailing-comma = false

[tool.ruff.lint.isort.sections]
"Testing" = ["pytest"]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.validator"]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 120

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 5


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
